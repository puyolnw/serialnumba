const express = require('express');
const { User, SystemSetting, SerialHistory, Activity, Serial } = require('./models');
const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');
const Jimp = require('jimp');

// Test certificate generation
async function testCertificateGeneration() {
  try {
    console.log('üß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®...\n');

    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå template
    console.log('1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå template...');
    const templatePath = path.join(__dirname, 'picture/‡∏ï‡∏±‡∏ß‡πÄ‡∏õ‡∏•‡πà‡∏≤.png');
    const examplePath = path.join(__dirname, 'picture/‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á.png');
    
    if (!fs.existsSync(templatePath)) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå template: ‡∏ï‡∏±‡∏ß‡πÄ‡∏õ‡∏•‡πà‡∏≤.png');
    }
    if (!fs.existsSync(examplePath)) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á.png');
    }
    console.log('‚úÖ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå template ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß\n');

    // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    console.log('2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û...');
    const template = await Jimp.read(templatePath);
    console.log(`‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏Ç‡∏ô‡∏≤‡∏î: ${template.getWidth()}x${template.getHeight()}\n`);

    // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î font
    console.log('3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î font...');
    const font = await Jimp.loadFont(Jimp.FONT_SANS_32_BLACK);
    const smallFont = await Jimp.loadFont(Jimp.FONT_SANS_16_BLACK);
    console.log('‚úÖ ‡πÇ‡∏´‡∏•‡∏î font ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n');

    // 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    console.log('4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û...');
    const testImage = template.clone();
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const testData = {
      studentName: '‡∏ô‡∏≤‡∏¢‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏£‡∏∞‡∏ö‡∏ö',
      studentId: 'TEST001',
      totalHours: 120,
      requiredHours: 100,
      currentDate: new Date().toLocaleDateString('th-TH', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      })
    };

    // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    testImage.print(font, 400, 300, testData.studentName);
    testImage.print(smallFont, 400, 350, `‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤: ${testData.studentId}`);
    testImage.print(smallFont, 400, 380, `‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥: ${testData.totalHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`);
    testImage.print(smallFont, 400, 410, `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${testData.currentDate}`);

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const testOutputPath = path.join(__dirname, 'picture/test-output.png');
    await testImage.writeAsync(testOutputPath);
    console.log(`‚úÖ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà: ${testOutputPath}\n`);

    // 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á PDF
    console.log('5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á PDF...');
    const pdfBuffer = await generateTestPDF(testImage);
    const pdfPath = path.join(__dirname, 'picture/test-certificate.pdf');
    fs.writeFileSync(pdfPath, pdfBuffer);
    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà: ${pdfPath}\n`);

    // 6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    console.log('6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
    try {
      await require('./config/database').authenticate();
      console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n');
    } catch (error) {
      console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ (‡∏õ‡∏Å‡∏ï‡∏¥‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ô server)\n');
    }

    // 7. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    console.log('7. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
    try {
      const userCount = await User.count();
      const activityCount = await Activity.count();
      const serialHistoryCount = await SerialHistory.count();
      
      console.log(`üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:`);
      console.log(`   - ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${userCount} ‡∏Ñ‡∏ô`);
      console.log(`   - ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°: ${activityCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      console.log(`   - ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ Serial: ${serialHistoryCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`);
    } catch (error) {
      console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ\n');
    }

    console.log('üéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    console.log('\nüìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô:');
    console.log(`   - ${testOutputPath}`);
    console.log(`   - ${pdfPath}`);
    console.log('\nüí° ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
    console.log('   1. ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå test-output.png ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß');
    console.log('   2. ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå test-certificate.pdf ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÉ‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® PDF');
    console.log('   3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà');

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', error.message);
    console.error('Stack trace:', error.stack);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
async function generateTestPDF(image) {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({
        size: 'A4',
        layout: 'landscape'
      });
      
      const buffers = [];
      doc.on('data', buffers.push.bind(buffers));
      doc.on('end', () => {
        const pdfBuffer = Buffer.concat(buffers);
        resolve(pdfBuffer);
      });
      
      // ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô buffer
      image.getBufferAsync(Jimp.MIME_PNG).then(imageBuffer => {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏•‡∏á PDF
        doc.image(imageBuffer, 0, 0, { 
          width: 842, 
          height: 595,
          fit: [842, 595]
        });
        
        doc.end();
      }).catch(reject);
    } catch (error) {
      reject(error);
    }
  });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö API endpoints
async function testAPIEndpoints() {
  console.log('\nüåê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Endpoints...\n');
  
  const testCases = [
    {
      name: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®',
      method: 'GET',
      url: '/api/certificate/check-eligibility',
      description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà'
    },
    {
      name: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®',
      method: 'GET', 
      url: '/api/certificate/generate/1',
      description: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® PDF'
    }
  ];

  testCases.forEach((testCase, index) => {
    console.log(`${index + 1}. ${testCase.name}`);
    console.log(`   Method: ${testCase.method}`);
    console.log(`   URL: ${testCase.url}`);
    console.log(`   Description: ${testCase.description}`);
    console.log('');
  });

  console.log('üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API:');
  console.log('   1. ‡∏£‡∏±‡∏ô server: npm run dev');
  console.log('   2. ‡πÉ‡∏ä‡πâ Postman ‡∏´‡∏£‡∏∑‡∏≠ curl ‡∏ó‡∏î‡∏™‡∏≠‡∏ö endpoints');
  console.log('   3. ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô frontend ‡∏ó‡∏µ‡πà /student/certificate');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies
async function testDependencies() {
  console.log('\nüì¶ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Dependencies...\n');
  
  const requiredPackages = [
    'pdfkit',
    'jimp', 
    'canvas',
    'express',
    'sequelize'
  ];

  for (const pkg of requiredPackages) {
    try {
      require(pkg);
      console.log(`‚úÖ ${pkg} - ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß`);
    } catch (error) {
      console.log(`‚ùå ${pkg} - ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á`);
    }
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
async function runTests() {
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡∏¢‡∏ö‡∏±‡∏ï‡∏£\n');
  console.log('=' .repeat(50));
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö dependencies
  await testDependencies();
  
  console.log('\n' + '=' .repeat(50));
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®
  await testCertificateGeneration();
  
  console.log('\n' + '=' .repeat(50));
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API endpoints
  await testAPIEndpoints();
  
  console.log('\n' + '=' .repeat(50));
  console.log('‚ú® ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
if (require.main === module) {
  runTests().catch(console.error);
}

module.exports = {
  testCertificateGeneration,
  testAPIEndpoints,
  testDependencies,
  runTests
};
