import { Link, useLocation } from 'react-router-dom'
import { useAuth } from '../contexts/AuthContext'
import { useState, useEffect } from 'react'
import api from '../services/api'

const Sidebar = () => {
  const { user } = useAuth()
  const location = useLocation()
  const [expandedMenus, setExpandedMenus] = useState({})
  const [isEligibleForCertificate, setIsEligibleForCertificate] = useState(false)

  // Check certificate eligibility for students
  useEffect(() => {
    const checkCertificateEligibility = async () => {
      if (user && user.role === 'STUDENT') {
        try {
          const response = await api.get('/certificate/check-eligibility')
          if (response.data.success) {
            setIsEligibleForCertificate(response.data.data.isEligible)
          }
        } catch (error) {
          console.error('Failed to check certificate eligibility:', error)
        }
      }
    }

    checkCertificateEligibility()
  }, [user])

  const toggleMenu = (menuKey) => {
    setExpandedMenus(prev => {
      const newState = {}
      // Close all other menus and toggle the clicked one
      Object.keys(prev).forEach(key => {
        if (key !== menuKey) {
          newState[key] = false
        }
      })
      newState[menuKey] = !prev[menuKey]
      return newState
    })
  }

  const getMenuItems = () => {
    if (!user) return []

    const baseItems = [
      { 
        path: `/${user.role}`, 
        label: '‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î', 
        icon: 'üè†',
        type: 'single'
      },
    ]

    if (user.role.toLowerCase() === 'admin') {
      baseItems.push(
        {
          key: 'activity-management',
          label: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°',
          icon: 'üìÖ',
          type: 'submenu',
          children: [
            { path: '/admin/activities', label: '‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°', icon: 'üìã', type: 'single' },
            { path: '/admin/activities/create', label: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°', icon: '‚ûï', type: 'single' },
            { path: '/admin/serials/send', label: '‡∏™‡πà‡∏á‡∏ã‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏•', icon: 'üì§', type: 'single' }
          ]
        },
        {
          key: 'user-management',
          label: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
          icon: 'üë•',
          type: 'submenu',
          children: [
            { path: '/admin/users/students', label: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', icon: 'üéì', type: 'single' },
            { path: '/admin/users/staff', label: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏ï‡∏≤‡∏ü', icon: 'üë®‚Äçüíº', type: 'single' },
            { path: '/admin/users/admins', label: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô', icon: 'üëë', type: 'single' }
          ]
        },
        {
          key: 'reports',
          label: '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô',
          icon: 'üìä',
          type: 'submenu',
          children: [
            { path: '/admin/reports/members', label: '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å', icon: 'üë•', type: 'single' },
            { path: '/admin/reports/activities', label: '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°', icon: 'üìÖ', type: 'single' },
            { path: '/admin/reports/evaluations', label: '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô', icon: '‚≠ê', type: 'single' }
          ]
        },
        {
          key: 'system-settings',
          label: '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö',
          icon: '‚öôÔ∏è',
          type: 'submenu',
          children: [
            { path: '/admin/settings', label: '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö', icon: 'üîß', type: 'single' },
            { path: '/admin/mail-settings', label: '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•', icon: 'üìß', type: 'single' },
            { path: '/admin/mail-test', label: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•', icon: 'üì§', type: 'single' }
          ]
        }
      )
    }

    if (user.role.toLowerCase() === 'staff') {
      baseItems.push(
        { path: '/staff/attendance', label: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°', icon: '‚úÖ', type: 'single' },
        { path: '/staff/serials', label: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Serial', icon: 'üé´', type: 'single' },
        { path: '/staff/qr-generator', label: '‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code', icon: 'üì±', type: 'single' },
        {
          key: 'reports',
          label: '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô',
          icon: 'üìà',
          type: 'submenu',
          children: [
            { path: '/staff/participants', label: '‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°', icon: 'üë•', type: 'single' },
            { path: '/staff/analytics', label: '‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå', icon: 'üìä', type: 'single' }
          ]
        }
      )
    }

    if (user.role.toLowerCase() === 'student') {
      baseItems.push(
        { path: '/activities', label: '‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°', icon: 'üìÖ', type: 'single' },
        { path: '/student/progress', label: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô', icon: 'üìä', type: 'single' },
        { path: '/student/serials', label: '‡πÅ‡∏•‡∏Å Serial', icon: 'üé´', type: 'single' },
        { path: '/student/history', label: '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ Serial', icon: 'üìö', type: 'single' },
        { path: '/student/profile', label: '‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô', icon: 'üë§', type: 'single' }
      )
      
      // Add certificate menu item only if student is eligible
      if (isEligibleForCertificate) {
        baseItems.push(
          { path: '/student/certificate', label: '‡πÉ‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡∏¢‡∏ö‡∏±‡∏ï‡∏£', icon: 'üèÜ', type: 'single' }
        )
      }
    }

    return baseItems
  }

  const menuItems = getMenuItems()

  const renderMenuItem = (item, level = 0) => {
    if (item.type === 'single') {
      return (
        <Link
          key={item.path}
          to={item.path}
          style={{
            display: 'flex',
            alignItems: 'center',
            padding: '12px 20px',
            paddingLeft: `${20 + level * 20}px`,
            color: 'white',
            textDecoration: 'none',
            backgroundColor: location.pathname === item.path ? '#007bff' : 'transparent',
            transition: 'all 0.3s ease',
            borderLeft: location.pathname === item.path ? '3px solid #007bff' : '3px solid transparent'
          }}
          onMouseEnter={(e) => {
            if (location.pathname !== item.path) {
              e.currentTarget.style.backgroundColor = '#495057'
            }
          }}
          onMouseLeave={(e) => {
            if (location.pathname !== item.path) {
              e.currentTarget.style.backgroundColor = 'transparent'
            }
          }}
        >
          <span style={{ marginRight: '10px', fontSize: '1.2rem' }}>
            {item.icon}
          </span>
          {item.label}
        </Link>
      )
    }

    if (item.type === 'submenu') {
      const isExpanded = expandedMenus[item.key] || false
      const hasActiveChild = item.children.some(child => location.pathname === child.path)

      return (
        <div key={item.key}>
          <div
            onClick={() => toggleMenu(item.key)}
            style={{
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'space-between',
              padding: '12px 20px',
              color: 'white',
              cursor: 'pointer',
              backgroundColor: hasActiveChild ? '#495057' : 'transparent',
              transition: 'all 0.3s ease',
              borderLeft: hasActiveChild ? '3px solid #007bff' : '3px solid transparent'
            }}
            onMouseEnter={(e) => {
              if (!hasActiveChild) {
                e.currentTarget.style.backgroundColor = '#495057'
              }
            }}
            onMouseLeave={(e) => {
              if (!hasActiveChild) {
                e.currentTarget.style.backgroundColor = 'transparent'
              }
            }}
          >
            <div style={{ display: 'flex', alignItems: 'center' }}>
              <span style={{ marginRight: '10px', fontSize: '1.2rem' }}>
                {item.icon}
              </span>
              {item.label}
            </div>
            <span style={{ 
              transform: isExpanded ? 'rotate(90deg)' : 'rotate(0deg)',
              transition: 'transform 0.3s ease',
              fontSize: '12px'
            }}>
              ‚ñ∂
            </span>
          </div>
          
          {isExpanded && (
            <div style={{ 
              backgroundColor: '#2c3034',
              borderLeft: '3px solid #007bff',
              marginLeft: '10px'
            }}>
              {item.children.map(child => renderMenuItem(child, 1))}
            </div>
          )}
        </div>
      )
    }

    return null
  }

  return (
    <aside className="sidebar" style={{
      width: '250px',
      backgroundColor: '#343a40',
      color: 'white',
      minHeight: '100vh',
      padding: 0,
      position: 'fixed',
      top: 0,
      left: 0,
      zIndex: 999
    }}>
      <div className="sidebar-content">
        {/* Website Title */}
        <div style={{ 
          padding: '20px',
          backgroundColor: '#343a40',
          borderBottom: '1px solid #495057'
        }}>
          <h2 style={{ 
            fontSize: '1.3rem', 
            fontWeight: 'bold',
            margin: 0,
            textAlign: 'center',
            color: 'white'
          }}>
            ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
          </h2>
          <p style={{ 
            fontSize: '0.9rem',
            margin: '5px 0 0 0',
            textAlign: 'center',
            opacity: 0.9,
            color: 'white'
          }}>
            ‡πÅ‡∏ú‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°{user?.role === 'ADMIN' ? '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö' : user?.role === 'STAFF' ? '‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà' : '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'}
          </p>
        </div>
        
        {/* Navigation Menu */}
        <nav style={{ paddingTop: '20px' }}>
          {menuItems.map(item => renderMenuItem(item))}
        </nav>
      </div>
    </aside>
  )
}

export default Sidebar